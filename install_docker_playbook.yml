---
- name: Install docker
  hosts: all
  become: yes

  tasks:
    - name: Install dependency packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'ca-certificates', 'curl', 'gnupg', 'lsb-release' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: ansible_distribution == 'Debian'

    - name: Add Ubuntu apt repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
      when: ansible_distribution == 'Ubuntu'

    - name: Add Debian apt repository
      apt_repository:
        repo: deb https://download.docker.com/linux/debian bullseye stable"
      when: ansible_distribution == 'Debian'

    - name: Install docker
      apt: name={{ item }} state=latest update_cache=yes
      with_items:
      - containerd.io
      - docker-ce-cli
      - docker-ce
      - docker-compose-plugin

    - block:
      - name: Prepare content of daemon.json
        set_fact:
          docker_vars: {}
      - name: Prepare content of daemon.json
        set_fact:
          docker_vars: "{{ docker_vars | combine({ item.key : item.value }) }}"
        with_items:
        - { key: "log-driver", value: "json-file" }
        - { key: "log-opts", value: { "max-size": "10m", "max-file": "3" } }
      - name: Write daemon.json
        copy:
          content: "{{ docker_vars | to_nice_json }}"
          dest: /etc/docker/daemon.json
          mode: u=rw,g=r,o=r

    - name: Make sure docker is active
      service: name=docker state=started enabled=yes

    - name: Add remote user to "docker" group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Auto clear docker
      ansible.builtin.cron:
        name: Auto clear docker
        special_time: daily
        user: root
        job: docker system prune -f
