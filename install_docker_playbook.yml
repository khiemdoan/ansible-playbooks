---
- name: Install docker
  hosts: all
  become: yes

  tasks:
    - name: Install dependency packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'ca-certificates', 'curl', 'gnupg' ]

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG apt key
      shell: curl -fsSL https://download.docker.com/linux/{{ ansible_distribution|lower }}/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg

    - name: Set permissions for docker.gpg
      file:
        path: /etc/apt/keyrings/docker.gpg
        mode: 'a+r'

    - name: Add apt repository
      apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable

    - name: Install docker
      apt: name={{ item }} state=latest update_cache=yes
      with_items:
      - containerd.io
      - docker-ce
      - docker-ce-cli
      - docker-buildx-plugin
      - docker-compose-plugin

    - block:
      - name: Prepare content of daemon.json
        set_fact:
          docker_vars: {}
      - name: Prepare content of daemon.json
        set_fact:
          docker_vars: "{{ docker_vars | combine({ item.key : item.value }) }}"
        with_items:
        - { key: "log-driver", value: "json-file" }
        - { key: "log-opts", value: { "max-size": "10m", "max-file": "3" } }
      - name: Write daemon.json
        copy:
          content: "{{ docker_vars | to_nice_json }}"
          dest: /etc/docker/daemon.json
          mode: u=rw,g=r,o=r

    - name: Make sure docker is active
      service: name=docker state=started enabled=yes

    - name: Add remote user to "docker" group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Auto clear docker
      ansible.builtin.cron:
        name: Auto clear docker
        special_time: daily
        user: root
        job: docker system prune --all --force
